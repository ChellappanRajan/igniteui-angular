@include describe('Elevations') {
    $my-elevations: igx-elevations(red, green, blue);

    @include it('should add elevations as CSS variables') {
        @include assert() {

            @include output() {
                @include igx-elevation-vars($my-elevations);
            }

            @include contains() {
                --igx-elevation-0: none;
            }
        }
    }

    @include it('should get an elevation as a CSS variable from an elevations map') {
        $expected: none;

        $igx-legacy-support: true !global;
        $actual: igx-elevation($my-elevations, 0);
        @include assert-equal($actual, $expected);

        $igx-legacy-support: false !global;
        $actual: igx-elevation($my-elevations, 0);
        @include assert-equal($actual, $expected);
    }

    @include it('should get an elevation as a CSS variable w/ legacy-support off') {
        $expected: var(--igx-elevation-5);

        $igx-legacy-support: false !global;
        $actual: igx-elevation($elevation: 5);
        @include assert-equal($actual, $expected);
    }

    @include it('should get an elevation value w/ legacy-support on') {
        $expected: none;

        $igx-legacy-support: true !global;
        $actual: igx-elevation($elevation: 0);
        @include assert-equal($actual, $expected);
    }
}

@include describe('Register Component') {
    $components: () !default;

    @include it('should add new component inside components list') {
        @include register-component('my-component');
        @include assert-true(map-has-key($components, 'my-component'));
    }
}

@include describe('Variable names for theme colors') {
    @include it('should be constructed in the right order:--[prefix]-[key]: var(--[name]-[key], [value])'){
        $name: red-theme;
        $key: color;
        $value: red;
        $prefix: 'my';

        $theme: (
            name: #{$name},
            #{$key}: #{$value}
        );
        @include assert() {
            @include output() {
                @include css-vars-from-theme($theme, #{$prefix});
            }

            @include contains() {
                --#{$prefix}-#{$key}: var(--#{$name}-#{$key}, #{$value});
            }
        }
    }

    @include it('should not generate variable names for name, palette, variant, selector or elevation') {
        $theme: (
            name: green-theme,
            palette: my-palette,
            variant: my-variant,
            selector: my-selector,
            elevation: my-elevsation,
            color: green
        );
        @include assert() {
            @include output() {
                @include css-vars-from-theme($theme);
            }

            @include expect() {
                --color: var(--green-theme-color, green);
            }
        }
    }
}

@include describe('CSS class names for colors') {
    @include it('should be generated by concatenating the name, variant, prefix, and suffix in the correct order.') {
        $name: primary;
        $variant: 500;
        $prefix: igx;
        $suffix: bg;
        $selector: #{$prefix}-#{$name}-#{$variant}-#{$suffix};

        @include assert() {
            @include output() {
                @include gen-color-class($name, $variant, $prefix, $suffix) {
                    content: 'test';
                };
            }

            @include expect() {
                .#{$selector}{
                    content: 'test'
                }
            }
        }
    }
}
