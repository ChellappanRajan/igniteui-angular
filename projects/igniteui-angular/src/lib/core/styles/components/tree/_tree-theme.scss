////
/// @group themes
/// @access public
/// @author <a href="https://github.com/desig9stein" target="_blank">Marin Popov</a>
////

/// Returns a map containing all style properties related to the theming the tree component.
/// @param {Map} $palette [$default-palette] - The palette used as basis for styling the component.
/// @param {Map} $schema [$light-schema] - The schema used as basis for styling the component.
///
/// @param {Color} $background [null] - The background color of the tree.
/// @param {Color} $text-color [null] - The text color of the tree.
///
/// @param {border-radius} $border-radius [null] - The border radius used for the tree component.
///
/// @requires $default-palette
/// @requires $light-schema
/// @requires apply-palette
/// @requires extend
/// @requires text-contrast
/// @requires round-borders
///
/// @example scss Change the tree background
///   $my-tree-theme: igx-tree-theme($background: magenta);
///   // Pass the theme to the igx-tree component mixin
///   @include igx-tree($my-tree-theme);
@function igx-tree-theme(
    $palette: $default-palette,
    $schema: $light-schema,

    $background: null,
    $background-hover: null,
    $background-selected: null,
    $background-selected-focused: null,

    $color: null,
    $color-hover: null,
    $color-selected: null,

    $drop-indicator-color: null,

    $tree-indicator-color: null,
    $tree-indicator-color-hover: null,
    $tree-indicator-color-selected: null,
) {
    $name: 'igx-tree';
    $tree-schema: ();

    @if map-has-key($schema, $name) {
        $tree-schema: map-get($schema, $name);
    } @else {
        $tree-schema: $schema;
    }

    $theme: apply-palette($tree-schema, $palette);

    @return extend($theme, (
        name: $name,
        palette: $default-palette,

        background: $background,
        background-hover: $background-hover,
        background-selected: $background-selected,
        background-selected-focused: $background-selected-focused,

        color: $color,
        color-hover: $color-hover,
        color-selected: $color-selected,

        drop-indicator-color: $drop-indicator-color,

        tree-indicator-color: $tree-indicator-color,
        tree-indicator-color-hover: $tree-indicator-color-hover,
        tree-indicator-color-selected: $tree-indicator-color-selected,
    ));
}

/// @param {Map} $theme - The theme used to style the component.
/// @requires {mixin} igx-root-css-vars
/// @requires --var
@mixin igx-tree($theme) {
    @include igx-root-css-vars($theme);

    $left: if-ltr(left, right);
    $right: if-ltr(right, left);

    $node-indent: (
        comfortable: rem(24px),
        cosy: rem(16px),
        compact: rem(12px)
    );

    $node-height: (
        comfortable: rem(50px),
        cosy: rem(40px),
        compact: rem(32px)
    );

    %tree-node,
    %tree-node-wrapper,
    %tree-node-indicator,
    %tree-node-content,
    %tree-node-select {
        display: flex;
    }

    %tree-node-display {
        flex-direction: column;
        justify-content: center;
    }
    %tree-node-wrapper,
    %tree-node-indicator,
    %tree-node-select {
        align-items: center;
    }

    %tree-node-indicator,
    %tree-node-select {
        margin-#{$right}: rem(8px);
    }

    %tree-node-indicator--hidden {
        visibility: hidden;
    }

    %tree-node {
        flex-direction: column;
    }

    %tree-node-wrapper {
        min-height: map-get($node-height, 'comfortable');
        padding-#{$right}: map-get($node-indent, 'comfortable');
        background: --var($theme, 'background');
        color: --var($theme, 'color');

        &:hover,
        &:focus {
            background: --var($theme, 'background-hover');
        }

        &:focus {
            outline-color: transparent;
        }

        &--cosy {
            min-height: map-get($node-height, 'cosy');

            %tree-node-spacer {
                width: map-get($node-indent, 'cosy')
            }
        }

        &--compact {
            min-height: map-get($node-height, 'compact');

            %tree-node-spacer {
                width: map-get($node-indent, 'compact')
            }
        }
    }

    %tree-node-wrapper--selected {
        background: --var($theme, 'background-selected');

        &:focus,
        &:hover {
            background: --var($theme, 'background-selected-focused');

            %tree-node-indicator {
                color: --var($theme, 'tree-indicator-color-selected');
            }
        }
    }

    %tree-node-spacer {
        display: inline-block;
        width: map-get($node-indent, 'comfortable');
    }

    %tree-node-content {
        display: block;
        position: relative;
        align-items: center;
        flex: 1;
        @include ellipsis();
    }

    %tree-node-indicator {
        justify-content: center;
        cursor: pointer;

        color: --var($theme, 'tree-indicator-color');

        &:hover,
        &:focus, {
            color: --var($theme, 'tree-indicator-color-hover');
        }
    }

    %tree-node-group {
        overflow: hidden;
    }
}


